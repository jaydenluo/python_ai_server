"""
TTS使用统计模型
"""

from datetime import datetime, date
from typing import Optional, Dict, Any
from sqlalchemy import Column, String, Integer, Float, DateTime, Date, JSON, Index
from app.core.orm.models import BaseModel


class TTSUsageStats(BaseModel):
    """TTS使用统计模型"""
    
    __tablename__ = "tts_usage_stats"
    
    # 基本信息
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String(36), nullable=True, index=True, comment="用户ID")
    provider = Column(String(50), nullable=False, index=True, comment="服务提供商")
    date = Column(Date, nullable=False, index=True, comment="统计日期")
    
    # 请求统计
    total_requests = Column(Integer, default=0, comment="总请求数")
    successful_requests = Column(Integer, default=0, comment="成功请求数")
    failed_requests = Column(Integer, default=0, comment="失败请求数")
    
    # 内容统计
    total_characters = Column(Integer, default=0, comment="总字符数")
    total_duration = Column(Float, default=0.0, comment="总音频时长(秒)")
    total_file_size = Column(Integer, default=0, comment="总文件大小(字节)")
    
    # 性能统计
    average_response_time = Column(Float, default=0.0, comment="平均响应时间(秒)")
    min_response_time = Column(Float, default=0.0, comment="最小响应时间(秒)")
    max_response_time = Column(Float, default=0.0, comment="最大响应时间(秒)")
    
    # 成本统计
    total_cost = Column(Float, default=0.0, comment="总成本")
    cost_per_character = Column(Float, default=0.0, comment="每字符成本")
    
    # 时间信息
    created_at = Column(DateTime, default=datetime.utcnow, comment="创建时间")
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, comment="更新时间")
    
    # 扩展统计
    extra_stats = Column(JSON, nullable=True, comment="扩展统计信息")
    
    # 创建复合索引
    __table_args__ = (
        Index('idx_user_provider_date', 'user_id', 'provider', 'date'),
        Index('idx_provider_date', 'provider', 'date'),
        Index('idx_date', 'date'),
    )
    
    def to_dict(self) -> Dict[str, Any]:
        """转换为字典"""
        return {
            "id": self.id,
            "user_id": self.user_id,
            "provider": self.provider,
            "date": self.date.isoformat() if self.date else None,
            "total_requests": self.total_requests,
            "successful_requests": self.successful_requests,
            "failed_requests": self.failed_requests,
            "total_characters": self.total_characters,
            "total_duration": self.total_duration,
            "total_file_size": self.total_file_size,
            "average_response_time": self.average_response_time,
            "min_response_time": self.min_response_time,
            "max_response_time": self.max_response_time,
            "total_cost": self.total_cost,
            "cost_per_character": self.cost_per_character,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            "extra_stats": self.extra_stats
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "TTSUsageStats":
        """从字典创建实例"""
        stats = cls()
        for key, value in data.items():
            if hasattr(stats, key):
                setattr(stats, key, value)
        return stats
    
    def add_request(self, success: bool, characters: int = 0, 
                   duration: float = 0.0, file_size: int = 0,
                   response_time: float = 0.0, cost: float = 0.0):
        """添加请求统计"""
        self.total_requests += 1
        
        if success:
            self.successful_requests += 1
        else:
            self.failed_requests += 1
        
        self.total_characters += characters
        self.total_duration += duration
        self.total_file_size += file_size
        self.total_cost += cost
        
        # 更新响应时间统计
        if response_time > 0:
            if self.min_response_time == 0 or response_time < self.min_response_time:
                self.min_response_time = response_time
            if response_time > self.max_response_time:
                self.max_response_time = response_time
            
            # 计算平均响应时间
            if self.successful_requests > 0:
                total_time = self.average_response_time * (self.successful_requests - 1) + response_time
                self.average_response_time = total_time / self.successful_requests
        
        # 计算每字符成本
        if self.total_characters > 0:
            self.cost_per_character = self.total_cost / self.total_characters
        
        self.updated_at = datetime.utcnow()
    
    def get_success_rate(self) -> float:
        """获取成功率"""
        if self.total_requests == 0:
            return 0.0
        return (self.successful_requests / self.total_requests) * 100
    
    def get_average_characters_per_request(self) -> float:
        """获取平均每请求字符数"""
        if self.total_requests == 0:
            return 0.0
        return self.total_characters / self.total_requests
    
    def get_average_duration_per_request(self) -> float:
        """获取平均每请求音频时长"""
        if self.total_requests == 0:
            return 0.0
        return self.total_duration / self.total_requests
    
    def get_average_file_size_per_request(self) -> float:
        """获取平均每请求文件大小"""
        if self.total_requests == 0:
            return 0.0
        return self.total_file_size / self.total_requests
    
    @classmethod
    def get_daily_stats(cls, start_date: date, end_date: date, 
                       user_id: Optional[str] = None, 
                       provider: Optional[str] = None) -> list:
        """获取每日统计"""
        # 这里应该实现数据库查询逻辑
        # 返回指定日期范围内的统计数据
        pass
    
    @classmethod
    def get_provider_stats(cls, start_date: date, end_date: date) -> Dict[str, Any]:
        """获取提供商统计"""
        # 这里应该实现数据库查询逻辑
        # 返回各提供商的统计数据
        pass
    
    @classmethod
    def get_user_stats(cls, user_id: str, start_date: date, end_date: date) -> Dict[str, Any]:
        """获取用户统计"""
        # 这里应该实现数据库查询逻辑
        # 返回用户的统计数据
        pass
